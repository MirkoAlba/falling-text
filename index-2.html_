<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Falling text</title>

    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.20.0/matter.min.js"
      integrity="sha512-6+7rTBmR6pRFe9fa0vCFjFaHZj/XYa7774bEBzRtxgdpIJOS++R3cKd6Prg/eJmxtsJotd8KAg4g57uuVQsZKA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>

    <link rel="stylesheet" href="https://use.typekit.net/gwy5vve.css" />

    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div id="container-boxes" class="container-boxes">
      <div class="box box--green" id="box-0">
        <p>NO WONDER</p>
      </div>

      <div class="box box--green" id="box-0">
        <p>THE SKIP</p>
      </div>
    </div>

    <script>
      window.addEventListener("load", function () {
        function mergeObjects(obj1, obj2) {
          return { ...obj1, ...obj2 };
        }

        const DEGREE_45 = Math.PI / 4,
          DEGREE_60 = Math.PI / 3,
          DEGREE_90 = Math.PI / 2,
          DEGREE_180 = Math.PI,
          DEGREE_270 = (Math.PI * 3) / 2,
          DEGREE_360 = Math.PI * 2,
          DEGREE_225 = (Math.PI * 5) / 4;

        var VIEW = {};
        VIEW.width = window.innerWidth;
        VIEW.height = window.innerHeight;
        VIEW.centerX = VIEW.width / 2;
        VIEW.centerY = VIEW.height / 2;
        VIEW.offsetX = VIEW.width / 2;
        VIEW.offsetY = VIEW.height / 2;

        // Matter.js module aliases
        var Engine = Matter.Engine,
          Render = Matter.Render,
          Runner = Matter.Runner,
          Common = Matter.Common,
          World = Matter.World,
          Bodies = Matter.Bodies,
          Body = Matter.Body,
          Events = Matter.Events,
          Query = Matter.Query;

        // create engine
        var engine = Engine.create({
            enableSleeping: false,
            constraintIterations: 4,
            positionIterations: 8,
            velocityIterations: 8,
          }),
          world = engine.world;

        engine.positionIterations = 8;
        engine.velocityIterations = 8;
        engine.constraintIterations = 4;

        var debug = false;

        // ?debug
        if (window.location.search.indexOf("debug") > -1) {
          debug = true;
        }

        // create renderer
        var render = Render.create({
          engine: engine,
          element: debug ? document.getElementById("container-boxes") : false,
          options: {
            width: window.innerWidth,
            height: window.innerHeight,
            background: "#f2f2f2",
            wireframeBackground: false,
            wireframes: false,
            hasBounds: true,
            enabled: true,
            showSleeping: debug,
            showDebug: debug,
            showBroadphase: debug,
            showBounds: debug,
            showVelocity: debug,
            showCollisions: debug,
            showAxes: false,
            showPositions: debug,
            showAngleIndicator: debug,
            showIds: debug,
            showShadows: false,
          },
        });

        Render.run(render);

        // create runner
        var runner = Runner.create({
          enableSleeping: false,
          constraintIterations: 4,
          positionIterations: 8,
          velocityIterations: 8,
        });

        Runner.run(runner, engine);

        engine.positionIterations = 8;
        engine.velocityIterations = 8;
        engine.constraintIterations = 4;

        var wallLeft, wallRight, ground;

        // add walls
        var wallopts = {
          isStatic: true,
          restitution: 0.1,
          friction: 1,
        };

        var groundopts = {
          isStatic: true,
          restitution: 0.1,
          friction: 1,
        };

        World.add(world, [
          // ground
          (ground = Bodies.rectangle(
            window.innerWidth / 2,
            window.innerHeight + 50,
            window.innerWidth + 200,
            100,
            groundopts
          )),
          // walls
          (wallRight = Bodies.rectangle(
            window.innerWidth + 50,
            window.innerHeight / 2,
            100,
            window.innerHeight,
            wallopts
          )), // right
          (wallLeft = Bodies.rectangle(
            -50,
            window.innerHeight / 2,
            100,
            window.innerHeight,
            wallopts
          )), // left
        ]);

        // Boxes
        var defaultBoxOptions = {
          friction: 1,
          frictionAir: 0.1,
          restitution: 0.2,
          density: 0.001,
          //   slop: 0,
        };

        var pixelStartingPoint = -VIEW.height;

        var boxesToRender = [
          {
            type: "green",
            text: "NO WONDER",
            x: 0,
            y: pixelStartingPoint,
            objectOptions: mergeObjects(defaultBoxOptions, {
              angle: DEGREE_45,
            }),
          },
        ];

        var bodiesDom = document.querySelectorAll(".box"),
          bodies = [];

        // Init the bodies
        for (var i = 0, l = bodiesDom.length; i < l; i++) {
          var bodyDomWidth = bodiesDom[i].offsetWidth,
            boxDomHeight = bodiesDom[i].offsetHeight;

          var borderRadius = parseFloat(
              window.getComputedStyle(bodiesDom[i]).borderRadius
            ),
            paddingLeft = parseFloat(
              window.getComputedStyle(bodiesDom[i]).paddingLeft
            );

          var body = Bodies.rectangle(
            VIEW.centerX + Math.floor(VIEW.width / 2) - VIEW.width / 4,
            VIEW.centerY + Math.floor(VIEW.height / 2) - VIEW.height / 4,
            bodyDomWidth,
            boxDomHeight,
            mergeObjects(defaultBoxOptions, {
              chamfer: { radius: borderRadius },
            })
          );

          bodiesDom[i].id = body.id;

          bodies.push(body);
        }

        World.add(
          engine.world,
          bodies,
          Bodies.rectangle(200, 200, 100, 100, {
            chamfer: { radius: 20 },
          })
        );

        (function update() {
          for (var i = 0, l = bodiesDom.length; i < l; i++) {
            var bodyDom = bodiesDom[i],
              body = null;

            for (var j = 0, k = bodies.length; j < k; j++) {
              if (bodies[j].id == bodyDom.id) {
                body = bodies[j];
                break;
              }
            }

            if (body === null) continue;

            bodyDom.style.transform =
              "translate( " +
              (body.position.x - bodyDom.offsetWidth / 2) +
              "px, " +
              (body.position.y - bodyDom.offsetHeight / 2) +
              "px )";
            bodyDom.style.transform += "rotate( " + body.angle + "rad )";
          }

          window.requestAnimationFrame(update);
        })();
      });
    </script>
  </body>
</html>
